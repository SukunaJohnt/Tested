getgenv().Settings = {
    autocreateandjoinportal = false,
    replay = false,
    record = false,
    skip = false,
    FileName = "datnguyen",
    Options = "Replay" -- ReturnToLobby ,  Replay 
}
loadstring(game:HttpGet("https://raw.githubusercontent.com/SukunaJohnt/Autoed/main/Datnguyen"))()
if getgenv().Settings.autocreateandjoinportal == true then
    repeat wait() until game:IsLoaded()
    if game.PlaceId == 16474126979 then 
        wait(.5)
        spawn(function()
        while task.wait(.1) do 
        if  not game:GetService("Workspace").Portal[game.Players.LocalPlayer.Name]:FindFirstChild("DoubleDungeonPortal") then 
        local args = {
           [1] = "DoubleDungeonPortal",
           [2] = 1
       }
       
       game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("InventoryUse"):FireServer(unpack(args))
     end 
     
       for i,v in pairs(game:GetService("Workspace").Portal:GetDescendants()) do 
        if v:IsA("MeshPart") and v.Name == "DoubleDungeonPortal" and v:FindFirstChild("Leader") and v.Leader.Value == game.Players.LocalPlayer.Name then 
           game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("StartPortal"):FireServer()
         end 
     end
        end 
     end)
    end
    end
    
    
    if  game.PlaceId ~= 16474126979  and getgenv().Settings.record == true then
        repeat wait() until game:IsLoaded()
    game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Ready"):FireServer()
    
    local startTime = tick()
    local towerRecord = {}
    local httpService = game:GetService("HttpService")
    local mt = getrawmetatable(game)
    local oldNamecall = mt.__namecall
    setreadonly(mt, false)
    mt.__namecall = newcclosure(function(self, ...)
        args = {...}
        if getnamecallmethod() == "FireServer" and tostring(self) == "CreateUnits" then
            towerRecord[#towerRecord + 1] = {
                ["time"] = tick() - startTime; 
                ["character"] = args[1]; 
                ["position"] = tostring(args[2]); 
                ["unitid"] = tostring(args[4]);
                ["type"] = "CreateUnit";
            }    
        elseif getnamecallmethod() == "FireServer" and tostring(self) == "Upgrades" then
            towerRecord[#towerRecord + 1] = {
                ["time"] = tick() - startTime; 
                ["character"] = args[1].Name; 
                ["type"] = "UpgradeUnit";
            }    
        elseif getnamecallmethod() == "FireServer" and tostring(self) == "SellUnit" then
            towerRecord[#towerRecord + 1] = {
                ["time"] = tick() - startTime; 
                ["character"] = args[1].Name; 
                ["type"] = "SellUnit";
            }    
        end
    
        return oldNamecall(self, unpack(args))
    end)
    setreadonly(mt, true)
    
    spawn(function()
    while task.wait() do 
        writefile(getgenv().Settings.FileName .. ".txt", httpService:JSONEncode(towerRecord))
        end
    end)
    end
    
    --Auto Replay
    if   game.PlaceId ~= 16474126979 and getgenv().Settings.replay == true then
         repeat wait() until game:IsLoaded()
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Ready"):FireServer()
        local replayName =  getgenv().Settings.FileName .. ".txt"
        local startTime = tick()
     local macro = readfile(replayName)
     local httpService = game:GetService("HttpService")
     local recordTowers = httpService:JSONDecode(macro)
     local function stcf(s)
        return loadstring("return CFrame.new(" .. s .. ");")();
     end
     
     local function place(info)
        local args = {
            [1] = info.character,
            [2] = stcf(info.position),
            [3] = Vector3.zero,
            [4] = info.unitid
        }
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("CreateUnits"):FireServer(unpack(args))
        end
        local function upgrade(info)
            local args = {
                [1] = workspace:WaitForChild("Unit"):WaitForChild(game.Players.LocalPlayer.Name):WaitForChild(info.character)
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Upgrades"):FireServer(unpack(args))
        end 
         local function sell(info)
            local player = game.Players.LocalPlayer.Name
            local unitsell = workspace:WaitForChild("Unit"):WaitForChild(player):WaitForChild(info.character)
            game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("SellUnit"):FireServer(unitsell)  
         end 
        local tower = 1
        spawn(function()
        while task.wait() do 
            if not recordTowers[tower] then 
                break 
            end
    
            local currentTask = recordTowers[tower] 
            if (currentTask.time <= tick() - startTime) then 
                 if currentTask.type == "CreateUnit" then 
                place(currentTask)
                 elseif currentTask.type == "UpgradeUnit" then 
                    upgrade(currentTask)
                 elseif currentTask.type == "SellUnit" then 
                    sell(currentTask)
                 end
                recordTowers[tower] = nil
                tower = tower + 1 
                end 
            end 
    end)
    end
    
    -- 
    
    --Skip Reward
    if getgenv().Settings.skip == true then
    repeat wait() until game:IsLoaded()
    spawn(function()
    while task.wait(.1) do 
        if   game.PlaceId ~= 16474126979 then 
    if game:GetService("Players").LocalPlayer.PlayerGui.Notification[getgenv().Settings.Options].Visible == true then 
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild(getgenv().Settings.Options):FireServer()
    end 
    end
    end
    end)
    end






    local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Anime Fantasy ",
    SubTitle = "by 2trumskid",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = False, -- The blur may be detectable, setting this to false disables blur entirely
    Theme = "Rose",
    MinimizeKey = Enum.KeyCode.LeftControl -- Used when theres no MinimizeKeybind
})

--Fluent provides Lucide Icons https://lucide.dev/icons/ for the tabs, icons are optional
local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}

local Options = Fluent.Options

do
    Fluent:Notify({
        Title = "Notification",
        Content = "This is a notification",
        SubContent = "SubContent", -- Optional
        Duration = 5 -- Set to nil to make the notification not disappear
    })



    Tabs.Main:AddParagraph({
        Title = "Macro",
        Content = "Macro Recording will AutoSave when u leaving the game!"
    })


    local Toggle = Tabs.Main:AddToggle("Replay", {Title = "Replay Macro", Default = false })

    Toggle:OnChanged(function(Value)
        Settings.replay = Value
    end)

    Options.Replay:SetValue(false)

    
    local Toggle = Tabs.Main:AddToggle("Record", {Title = "Record", Default = false })

    Toggle:OnChanged(function(Value)
        Settings.record = Value
    end)

    Options.Record:SetValue(false)



SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)

SaveManager:IgnoreThemeSettings()


SaveManager:SetIgnoreIndexes({})

InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")

InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)


Window:SelectTab(1)

Fluent:Notify({
    Title = "Ngdxt Service",
    Content = "The script has loaded fully 100%.",
    Duration = 10
})
SaveManager:LoadAutoloadConfig()
